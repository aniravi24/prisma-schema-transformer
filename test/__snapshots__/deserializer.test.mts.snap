// Vitest Snapshot v1

exports[`bad config path 1`] = `[Error: bad config path "not-exist.mjs"]`;

exports[`bad config path extension 1`] = `[Error: config file extension should be ".mjs"]`;

exports[`deserialized blog 1`] = `
"
datasource postgresql {
	provider = \\"postgresql\\"
	url = env(\\"DATABASE_URL\\")
}


generator client {
  provider = \\"prisma-client-js\\"
}


model User {
    id String  @id   @default(dbgenerated(\\"gen_random_uuid()\\"))  
  email String @unique     
  name String?      
  posts Post[] @relation(\\"PostToUser\\")
  likes Like[] @relation(\\"LikeToUser\\")
}
model Post {
    id String  @id   @default(cuid())  
  createdAt DateTime     @default(now())  
  updatedAt DateTime      @updatedAt
  published Boolean      
  title String      
  content String?      
  authorId String?      
  author User? @relation(\\"PostToUser\\", fields: [authorId], references: [id])
  status PostStatus      
  likes Like[] @relation(\\"LikeToPost\\")
}
model Like {
    id String  @id   @default(cuid())  
  userId String      
  user User @relation(\\"LikeToUser\\", fields: [userId], references: [id])
  postId String      
  post Post @relation(\\"LikeToPost\\", fields: [postId], references: [id])
@@unique([userId, postId])
}



enum PostStatus {
	hidden
	visible
	@@map(\\"PostStatuses\\")
}"
`;

exports[`deserialized schema 1`] = `
"
datasource db {
	provider = \\"postgresql\\"
	url = env(\\"DATABASE_URL\\")
}


generator client {
  provider = \\"prisma-client-js\\"
  output = env(\\"FOO\\")
  another = \\"foo\\"
  anotherFoo = \\"foo\\"
}


model Employee {
    plantId String       @map(\\"PlantId\\")
  employeeId String @unique      @map(\\"EmployeeId\\")
  uni String       @map(\\"Uni\\")
  anothers Another[] @relation(\\"AnothersToEmployees\\")
  lastOne Last? @relation(\\"EmployeesToLast_PlantId_EmployeeOneId\\")
  lastTwo Last? @relation(\\"EmployeesToLast_PlantId_EmployeeTwoId\\")
@@map(\\"Employees\\")
@@unique([plantId, uni])
@@id([plantId, employeeId])
}
model Another {
  /// @Foo
/// @Bar
  anotherId String       @map(\\"AnotherId\\")
  plantId String       @map(\\"PlantId\\")
  employeeId String       @map(\\"EmployeeId\\")
  uni String       @map(\\"Uni\\")
  employee Employee @relation(\\"AnothersToEmployees\\", fields: [plantId,employeeId], references: [plantId,employeeId], onDelete: NoAction)
@@map(\\"Anothers\\")
@@id([plantId, anotherId])
}
model Last {
  /// @Foo
  plantId String       @map(\\"PlantId\\")
  id Int  @id    
  employeeOneId String       @map(\\"EmployeeOneId\\")
  employeeOne Employee @relation(\\"EmployeesToLast_PlantId_EmployeeOneId\\", fields: [plantId,employeeOneId], references: [plantId,employeeId], onDelete: NoAction)
  employeeTwoId String       @map(\\"EmployeeTwoId\\")
  employeeTwo Employee @relation(\\"EmployeesToLast_PlantId_EmployeeTwoId\\", fields: [plantId,employeeTwoId], references: [plantId,employeeId], onDelete: NoAction)
@@unique([plantId, employeeOneId])
@@unique([plantId, employeeTwoId])
}"
`;

exports[`deserialized simple 1`] = `
"model Post {
    id Int  @id   @default(autoincrement())  
  title String      
  content String?      
  published Boolean     @default(false)  
  authorId Int       @map(\\"author_id\\")
  author User @relation(\\"postsTousers\\", fields: [authorId], references: [id])
  createdAt DateTime     @default(now())   @map(\\"created_at\\")
  updatedAt DateTime     @default(now())  @updatedAt @map(\\"updated_at\\")
@@map(\\"posts\\")
}
model User {
    id Int  @id   @default(autoincrement())  
  email String @unique     
  weight Float      
  posts Post[] @relation(\\"postsTousers\\")
  createdAt DateTime     @default(now())   @map(\\"created_at\\")
  updatedAt DateTime     @default(now())  @updatedAt @map(\\"updated_at\\")
@@map(\\"users\\")
}"
`;
